<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- PropertyPlaceholderConfigurer读取配置文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:resource.properties"></property>
		<!-- <property name="ignoreUnresoleablePlaceholders" value="true"></property> -->
	</bean>
	
	<!-- 一、使用c3p0连接池注册数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 基础配置 -->
		<property name="jdbcUrl" value="${jdbcUrl}"></property>
		<property name="driverClass" value="${driverClass}"></property>
		<property name="user" value="${user}"></property>
		<property name="password" value="${password}"></property>
		<!-- 关键配置 -->
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${initialPoolSize}"></property>
		<!--连接池中保留的最小连接数。Default: 2 -->
		<property name="minPoolSize" value="${minPoolSize}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${maxPoolSize}"></property>
		<!--关闭连接后不自动commit -->
		<property name="autoCommitOnClose" value="false" />
		<!--获取连接超时时间 -->
		<property name="checkoutTimeout" value="${checkoutTimeout}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。也就是获取连接失败的重试次数Default: 3 -->
		<property name="acquireIncrement" value="${acquireIncrement}"></property>

		<!-- 性能配置 -->
		<!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 
			0 -->
		<property name="maxStatements" value="${maxStatements}"></property>
		<!-- maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 
			0 -->
		<property name="maxStatementsPerConnection" value="${maxStatementsPerConnection}"></property>
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${maxIdleTime}"></property>
	</bean>
	
	<!--配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--注入数据库连接池,ref参照的是连接池注册的对象 -->
		<property name="dataSource" ref="dataSource" />
		<!--配置MyBaties全局配置文件：mybatis.xml,value值是mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis.xml" />
		<!--扫描entity包 使用别名 -->
		<property name="typeAliasesPackage" value="com.entity"/>
			
		<!--扫描sql配置文件：mapper需要的xml文件 -->
		<property name="mapperLocations">
			<array>
				<value>classpath:mapper/*.xml</value>
			</array>
		</property>
		<!--加载分页插件 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							reasonable=true,
							dialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<!--配置扫描Mapper接口包，动态实现Mapper接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!--给出需要扫描的Mapper接口包 -->
		<property name="basePackage" value="com.dao"/>
	</bean>
	<!--配置数据事务处理器 -->
	<!-- DataSourceTransactionManager通过调用java.sql.Connection来管理事务,
		而后者是通过DataSource获取到的。通过调用连接的commit()方法来提交事务。
		同样，事务失败时通过调用rollback()方法进行回滚。 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--配置基于注解的声明式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>