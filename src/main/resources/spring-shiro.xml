<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- 用户授权/认证信息Cache, 采用EhCache 缓存 -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" />
	</bean>
	
	<!-- 设置密码加密策略 md5hash -->
	<bean id="passwordMatcher" class="com.shiro.CustomCredentialsMatcher" />
	
	<!-- Realm实现  Realm是一个存储用户、角色、权限的域，Shiro从Realm获取安全数据 -->
	<bean id="authRealm" class="com.shiro.AuthRealm">
		<!-- 自定义密码加密算法 -->
		<property name="credentialsMatcher" ref="passwordMatcher" />
		<property name="cachingEnabled" value="true" />
		<property name="authenticationCachingEnabled" value="true"/>
		<property name="authenticationCacheName" value="authenticationCache"/>
		<property name="authorizationCachingEnabled" value="true"/> 
		<property name="authorizationCacheName" value="authorizationCache"/>
	</bean>

	<!-- 会话ID生成器 ,用于为当前session生成唯一的Id-->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid" />
		<property name="httpOnly" value="true" />
		<!--maxAge=-1 表示浏览器关闭时失效此 Cookie -->
		<property name="maxAge" value="-1" />
	</bean>

	<!-- 会话DAO 会话存储/持久化 ，SessionDAO用于会话的CRUD-->
	<bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<!-- EnterpriseCacheSessionDAO提供了“缓存”功能的会话维护 -->
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>

	<!-- 会话验证调度器  定期的验证会话是否已过期，如果过期将停止会话-->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<!-- 设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期； -->
		<property name="sessionValidationInterval" value="1800000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionIdUrlRewritingEnabled" value="false" />
		<property name="globalSessionTimeout" value="1800000" />
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionDAO" ref="sessionDAO" />
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	
	<!--RememberMe配置开始 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="2592000" /><!-- 30天 -->
	</bean>
	
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	<!--RememberMe配置结束 -->
	
	<!-- 安全管理 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="authRealm" /><!-- 引用自定义的realm -->
		<property name="rememberMeManager" ref="rememberMeManager" />
		<property name="sessionManager" ref="sessionManager" />
		<!-- 二级缓存 -->
		<property name="cacheManager" ref="shiroEhcacheManager" />
	</bean>
	
	<!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value ="username" />
		<property name="passwordParam" value="password" />
		<property name="rememberMeParam" value="rememberMe" />
		<property name="loginUrl" value="/Login/login" />
	</bean>
	
	<bean id="sysUserFilter" class="com.shiro.filter.SysUserFilter" />

	<bean id="rolesOrFilter" class="com.shiro.filter.CustomRolesAuthorizationFilter" />
	
	<!-- 此bean要被web.xml引用,和web.xml中的filtername同名 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/Login/login" /> <!-- 没有认证返回地址 -->
		<!-- 自定义filter -->
		<property name="filters">
			<map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
				<entry key="sysUser" value-ref="sysUserFilter" />
				<entry key="rolesOrFilter" value-ref="rolesOrFilter"/>
			</map>
		</property>
		<property name="unauthorizedUrl" value="/Login/error" /> <!-- 没有授权返回地址 -->
		<property name="filterChainDefinitions">
			<value>     
				<!-- **代表任意子目录 -->
				/Login/** = anon
				/js/** = anon
				/jsp/** = anon
				/css/** = anon
				/Images/** = anon
				/Javascript/** = anon
				/layui/** = anon
				/media/** = anon
				/swagger-ui.html = anon
	            /webjars/** = anon
	            /v2/** = anon
	            /swagger-resources/** = anon
				/account/** = rolesOrFilter["超级管理员","机构管理员"]
				/organization/** = roles[超级管理员]
				/task/taskView = roles[机构管理员]
				/task/finishedTaskView = roles[机构管理员]
				/task/unFinishedTaskView = roles[机构管理员]
				/task/create = roles[机构管理员]
				/task/update/** = roles[机构管理员]
				/task/updateUnpass/** = roles[机构管理员]
				/task/finishTask/** = roles[机构管理员]
				/task/**/delete = roles[机构管理员]
				/document/information = user
				/document/documentView/** = user
				/document/showVillage = user
				/document/villageView = rolesOrFilter["超级管理员","机构管理员"]
				/document/showCultureacpect/** = user
				/document/cultureacpectView = rolesOrFilter["超级管理员","机构管理员","学者"]
				/document/getOne/** = user
				/document/create/** = user
				/document/createVillage = rolesOrFilter["超级管理员","机构管理员"]
				/document/createCultureaspect = rolesOrFilter["超级管理员","机构管理员","学者"]
				/document/updateVillage/** = rolesOrFilter["超级管理员","机构管理员"]
				/document/updateCultureaspect/** = rolesOrFilter["超级管理员","机构管理员","学者"]
				/document/**/delete = user
				/document/**/deleteVillage = rolesOrFilter["超级管理员","机构管理员"]
				/document/**/deleteCultureaspect = rolesOrFilter["超级管理员","机构管理员","学者"]
				/document/download/**/** = user
				/document/preview/** = user
				/logout = logout
				/authenticated = authc
				/** = user,sysUser
			</value>
		</property>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- 生成代理，通过代理进行控制 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
	</bean>
	
	<!-- 安全管理器 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	
</beans>